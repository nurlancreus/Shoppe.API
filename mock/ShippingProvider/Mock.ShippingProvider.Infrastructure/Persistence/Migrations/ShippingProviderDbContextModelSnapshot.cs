// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mock.ShippingProvider.Infrastructure.Persistence;

#nullable disable

namespace Mock.ShippingProvider.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ShippingProviderDbContext))]
    partial class ShippingProviderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Mock.ShippingProvider.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Mock.ShippingProvider.Domain.Entities.ApiClient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("ApiClients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("37c7560c-d5cd-4777-ac9c-714fc30aaf4c"),
                            AddressId = new Guid("1c261a2d-4f1c-4e23-a1b4-863c746750fc"),
                            ApiKey = "",
                            CompanyName = "My Company",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            SecretKey = ""
                        });
                });

            modelBuilder.Entity("Mock.ShippingProvider.Domain.Entities.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApiClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DestinationAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EstimatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OriginAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ShippingMethod")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApiClientId");

                    b.HasIndex("DestinationAddressId");

                    b.HasIndex("OriginAddressId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("Mock.ShippingProvider.Domain.Entities.ShippingRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dimensions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Method")
                        .HasColumnType("int");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ShipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ShipmentId")
                        .IsUnique();

                    b.ToTable("ShippingRates");
                });

            modelBuilder.Entity("Mock.ShippingProvider.Domain.Entities.ApiClient", b =>
                {
                    b.HasOne("Mock.ShippingProvider.Domain.Entities.Address", "Address")
                        .WithMany("Clients")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Mock.ShippingProvider.Domain.Entities.Shipment", b =>
                {
                    b.HasOne("Mock.ShippingProvider.Domain.Entities.ApiClient", "ApiClient")
                        .WithMany("Shipments")
                        .HasForeignKey("ApiClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Mock.ShippingProvider.Domain.Entities.Address", "DestinationAddress")
                        .WithMany("ShipmentsDestination")
                        .HasForeignKey("DestinationAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mock.ShippingProvider.Domain.Entities.Address", "OriginAddress")
                        .WithMany("ShipmentsOrigin")
                        .HasForeignKey("OriginAddressId");

                    b.Navigation("ApiClient");

                    b.Navigation("DestinationAddress");

                    b.Navigation("OriginAddress");
                });

            modelBuilder.Entity("Mock.ShippingProvider.Domain.Entities.ShippingRate", b =>
                {
                    b.HasOne("Mock.ShippingProvider.Domain.Entities.Shipment", "Shipment")
                        .WithOne("ShippingRate")
                        .HasForeignKey("Mock.ShippingProvider.Domain.Entities.ShippingRate", "ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("Mock.ShippingProvider.Domain.Entities.Address", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("ShipmentsDestination");

                    b.Navigation("ShipmentsOrigin");
                });

            modelBuilder.Entity("Mock.ShippingProvider.Domain.Entities.ApiClient", b =>
                {
                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("Mock.ShippingProvider.Domain.Entities.Shipment", b =>
                {
                    b.Navigation("ShippingRate")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
