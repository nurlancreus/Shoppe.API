// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shoppe.Persistence.Context;

#nullable disable

namespace Shoppe.Persistence.Migrations
{
    [DbContext(typeof(ShoppeDbContext))]
    [Migration("20241116122345_mig_1")]
    partial class mig_1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BlogBlogCategory", b =>
                {
                    b.Property<Guid>("BlogsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BlogsId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("BlogBlogCategory");
                });

            modelBuilder.Entity("BlogBlogTag", b =>
                {
                    b.Property<Guid>("BlogsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BlogsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("BlogBlogTag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "admin-user-id",
                            RoleId = "admin-role-id"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProductProductCategory", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoriesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductProductCategory");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.About", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasAnnotation("RegexPattern", "^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasAnnotation("RegexPattern", "^\\+?\\d{1,3}?[-.●]?\\(?\\d{1,4}?\\)?[-.●]?\\d{1,4}[-.●]?\\d{1,9}$");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("About");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dd37583b-9c78-4159-a1e7-ccdc6a8be9eb"),
                            CreatedAt = new DateTime(2024, 11, 16, 12, 23, 43, 851, DateTimeKind.Utc).AddTicks(4842),
                            Description = "Who we are and why we do what we do!",
                            Email = "contact@shoppe.com",
                            Name = "Shoppe",
                            Phone = "123-456-7890",
                            Title = ""
                        });
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasDiscriminator<string>("AddressType").HasValue("Address");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Basket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CouponId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.BasketItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("ProductId");

                    b.ToTable("BasketItems", t =>
                        {
                            t.HasCheckConstraint("CK_BasketItem_Quantity", "Quantity >= 0");
                        });
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("BlogCoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BlogCoverId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasDiscriminator<string>("Type").HasValue("Category");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Coupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MaxUsage")
                        .HasColumnType("int");

                    b.Property<decimal>("MinimumOrderAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsageCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Discounts", t =>
                        {
                            t.HasCheckConstraint("CK_Discount_DiscountPercentage", "[DiscountPercentage] > 0 AND [DiscountPercentage] <= 100");
                        });
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.DiscountCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiscountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("CategoryId", "DiscountId")
                        .IsUnique();

                    b.ToTable("DiscountCategory");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.DiscountProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiscountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("ProductId", "DiscountId")
                        .IsUnique();

                    b.ToTable("DiscountProduct");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Files.ApplicationFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Storage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ApplicationFiles");

                    b.HasDiscriminator().HasValue("ApplicationFile");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin-role-id",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        });
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin-user-id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ca09e91-f2a9-45e0-8e07-949b90ab8a1d",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nurlancreus@example.com",
                            EmailConfirmed = false,
                            FirstName = "Nurlan",
                            IsActive = false,
                            LastName = "Shukurov",
                            LockoutEnabled = false,
                            NormalizedEmail = "NURLANCREUS@EXAMPLE.COM",
                            NormalizedUserName = "NURLANCREUS",
                            PasswordHash = "AQAAAAIAAYagAAAAENm3XkC+9N2NKQBjshRnyFatf55EyBTI+7qe1LNin3WZTStZVNSczb5QoJqF+j2sgg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ba05b545-cc7a-4cf4-86c1-135ef4ffba28",
                            TwoFactorEnabled = false,
                            UserName = "nurlancreus"
                        });
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BillingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid?>("CouponId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ShippingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("CouponId");

                    b.HasIndex("ShippingAddressId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductDetailsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.ProductDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Colors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Materials")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.ProductDimension", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("ProductDimensions");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Reactions.Reaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reactions");

                    b.HasDiscriminator<string>("EntityType").HasValue("Reaction");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Replies.Reply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Depth")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("ParentReplyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReplierId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentReplyId");

                    b.HasIndex("ReplierId");

                    b.ToTable("Replies");

                    b.HasDiscriminator<string>("Type").HasValue("Reply");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Reviews.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Reviews");

                    b.HasDiscriminator<string>("Type").HasValue("Review");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Slide", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ButtonText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Order")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("SliderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SliderId");

                    b.ToTable("Slides", t =>
                        {
                            t.HasCheckConstraint("CK_Slide_Order", "[Order] >= 0 AND [Order] <= 255");
                        });
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Sliders.Slider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Sliders");

                    b.HasDiscriminator<string>("Type").HasValue("Slider");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.SocialMediaLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AboutId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SocialPlatform")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AboutId");

                    b.ToTable("SocialMediaLinks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a4996047-92c5-4099-a069-a764e579307e"),
                            AboutId = new Guid("dd37583b-9c78-4159-a1e7-ccdc6a8be9eb"),
                            CreatedAt = new DateTime(2024, 11, 16, 12, 23, 43, 901, DateTimeKind.Utc).AddTicks(1773),
                            SocialPlatform = "Facebook",
                            URL = "https://facebook.com/shoppe"
                        },
                        new
                        {
                            Id = new Guid("5334fa0b-5461-4510-8093-f4dfd2be1fbe"),
                            AboutId = new Guid("dd37583b-9c78-4159-a1e7-ccdc6a8be9eb"),
                            CreatedAt = new DateTime(2024, 11, 16, 12, 23, 43, 901, DateTimeKind.Utc).AddTicks(1816),
                            SocialPlatform = "X",
                            URL = "https://x.com/shoppe"
                        },
                        new
                        {
                            Id = new Guid("1384094b-7281-47ad-9ffc-e87237e9922e"),
                            AboutId = new Guid("dd37583b-9c78-4159-a1e7-ccdc6a8be9eb"),
                            CreatedAt = new DateTime(2024, 11, 16, 12, 23, 43, 901, DateTimeKind.Utc).AddTicks(1825),
                            SocialPlatform = "Instagram",
                            URL = "https://instagram.com/shoppe"
                        },
                        new
                        {
                            Id = new Guid("f2d0c8bb-5a8c-4dc1-97bc-76a9bd2616e2"),
                            AboutId = new Guid("dd37583b-9c78-4159-a1e7-ccdc6a8be9eb"),
                            CreatedAt = new DateTime(2024, 11, 16, 12, 23, 43, 901, DateTimeKind.Utc).AddTicks(1833),
                            SocialPlatform = "Youtube",
                            URL = "https://youtube.com/shoppe"
                        });
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Tags.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasDiscriminator<string>("Type").HasValue("Tag");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.BillingAddress", b =>
                {
                    b.HasBaseType("Shoppe.Domain.Entities.Address");

                    b.HasDiscriminator().HasValue("Billing");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.ShippingAddress", b =>
                {
                    b.HasBaseType("Shoppe.Domain.Entities.Address");

                    b.HasDiscriminator().HasValue("Delivery");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Categories.BlogCategory", b =>
                {
                    b.HasBaseType("Shoppe.Domain.Entities.Categories.Category");

                    b.HasDiscriminator().HasValue("Blog");

                    b.HasData(
                        new
                        {
                            Id = new Guid("59c6d7c2-1911-48da-ae7c-29cb46078746"),
                            CreatedAt = new DateTime(2024, 11, 16, 12, 23, 43, 854, DateTimeKind.Utc).AddTicks(3585),
                            Description = "Tips on how to take care of your jewelry",
                            Name = "Jewelry Care",
                            Type = "Blog"
                        },
                        new
                        {
                            Id = new Guid("42b30ac8-3380-400b-91ca-dbf0a7102306"),
                            CreatedAt = new DateTime(2024, 11, 16, 12, 23, 43, 854, DateTimeKind.Utc).AddTicks(3598),
                            Description = "Updates on the latest jewelry trends",
                            Name = "Latest Trends",
                            Type = "Blog"
                        },
                        new
                        {
                            Id = new Guid("ece4baf5-08cb-4a64-88ac-cbcc0cee5943"),
                            CreatedAt = new DateTime(2024, 11, 16, 12, 23, 43, 854, DateTimeKind.Utc).AddTicks(3605),
                            Description = "Learn about different gemstones and their meanings",
                            Name = "Gemstone Guide",
                            Type = "Blog"
                        },
                        new
                        {
                            Id = new Guid("bf464cb2-002e-4f86-870a-3dc6c556293b"),
                            CreatedAt = new DateTime(2024, 11, 16, 12, 23, 43, 854, DateTimeKind.Utc).AddTicks(3628),
                            Description = "Jewelry gift ideas for various occasions",
                            Name = "Gift Ideas",
                            Type = "Blog"
                        },
                        new
                        {
                            Id = new Guid("b533e44a-8c48-437e-8eda-ac8d3ee6fcab"),
                            CreatedAt = new DateTime(2024, 11, 16, 12, 23, 43, 854, DateTimeKind.Utc).AddTicks(3635),
                            Description = "Guides and inspiration for making your own jewelry",
                            Name = "DIY Jewelry",
                            Type = "Blog"
                        });
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Categories.ProductCategory", b =>
                {
                    b.HasBaseType("Shoppe.Domain.Entities.Categories.Category");

                    b.HasDiscriminator().HasValue("Product");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2e394add-31b9-484b-9b7e-9b08bc2fc7b4"),
                            CreatedAt = new DateTime(2024, 11, 16, 12, 23, 43, 887, DateTimeKind.Utc).AddTicks(5105),
                            Description = "Elegant and modern necklaces",
                            Name = "Necklaces",
                            Type = "Product"
                        },
                        new
                        {
                            Id = new Guid("cc9bcfc6-d213-4724-8c58-0bb2068fd909"),
                            CreatedAt = new DateTime(2024, 11, 16, 12, 23, 43, 887, DateTimeKind.Utc).AddTicks(5116),
                            Description = "Stylish earrings for all occasions",
                            Name = "Earrings",
                            Type = "Product"
                        },
                        new
                        {
                            Id = new Guid("ef55cf4c-c917-4762-8c0b-0a371418e3c5"),
                            CreatedAt = new DateTime(2024, 11, 16, 12, 23, 43, 887, DateTimeKind.Utc).AddTicks(5121),
                            Description = "Beautiful bracelets in various styles",
                            Name = "Bracelets",
                            Type = "Product"
                        },
                        new
                        {
                            Id = new Guid("68797f71-e145-49e0-8d86-844c1ecb1e18"),
                            CreatedAt = new DateTime(2024, 11, 16, 12, 23, 43, 887, DateTimeKind.Utc).AddTicks(5126),
                            Description = "Rings for engagement, fashion, and more",
                            Name = "Rings",
                            Type = "Product"
                        },
                        new
                        {
                            Id = new Guid("29fbeeee-dcb3-4331-8cc0-8ccdfbe7a01c"),
                            CreatedAt = new DateTime(2024, 11, 16, 12, 23, 43, 887, DateTimeKind.Utc).AddTicks(5131),
                            Description = "Unique brooches to complement any outfit",
                            Name = "Brooches",
                            Type = "Product"
                        });
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Files.ContentImageFile", b =>
                {
                    b.HasBaseType("Shoppe.Domain.Entities.Files.ApplicationFile");

                    b.HasDiscriminator().HasValue("ContentImageFile");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Files.ImageFile", b =>
                {
                    b.HasBaseType("Shoppe.Domain.Entities.Files.ApplicationFile");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("ImageFile");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Files.SlideImageFile", b =>
                {
                    b.HasBaseType("Shoppe.Domain.Entities.Files.ApplicationFile");

                    b.Property<Guid>("SlideId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("SlideId")
                        .IsUnique()
                        .HasFilter("[SlideId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("SlideImageFile");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Reactions.BlogReaction", b =>
                {
                    b.HasBaseType("Shoppe.Domain.Entities.Reactions.Reaction");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlogReactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId", "BlogId")
                        .IsUnique()
                        .HasFilter("[BlogId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Blog");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Reactions.ReplyReaction", b =>
                {
                    b.HasBaseType("Shoppe.Domain.Entities.Reactions.Reaction");

                    b.Property<Guid>("ReplyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReplyReactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ReplyId");

                    b.HasIndex("UserId", "ReplyId")
                        .IsUnique()
                        .HasFilter("[ReplyId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Reply");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Replies.BlogReply", b =>
                {
                    b.HasBaseType("Shoppe.Domain.Entities.Replies.Reply");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("BlogId");

                    b.HasDiscriminator().HasValue("Blog");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Reviews.ProductReview", b =>
                {
                    b.HasBaseType("Shoppe.Domain.Entities.Reviews.Review");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("ProductId");

                    b.HasDiscriminator().HasValue("Product");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Sliders.HeroSlider", b =>
                {
                    b.HasBaseType("Shoppe.Domain.Entities.Sliders.Slider");

                    b.HasDiscriminator().HasValue("Hero");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Tags.BlogTag", b =>
                {
                    b.HasBaseType("Shoppe.Domain.Entities.Tags.Tag");

                    b.HasDiscriminator().HasValue("Blog");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4db58e0c-57df-4216-bf3b-24f189c9e89e"),
                            CreatedAt = new DateTime(2024, 11, 16, 12, 23, 43, 862, DateTimeKind.Utc).AddTicks(8662),
                            Name = "Fashion",
                            Type = "Blog"
                        },
                        new
                        {
                            Id = new Guid("3be49e7f-74da-4ff1-8981-57513492a00a"),
                            CreatedAt = new DateTime(2024, 11, 16, 12, 23, 43, 862, DateTimeKind.Utc).AddTicks(8670),
                            Name = "Jewelry Care",
                            Type = "Blog"
                        },
                        new
                        {
                            Id = new Guid("ac3fb6b8-224a-453c-a763-2cf01b714e0b"),
                            CreatedAt = new DateTime(2024, 11, 16, 12, 23, 43, 862, DateTimeKind.Utc).AddTicks(8675),
                            Name = "Gemstones",
                            Type = "Blog"
                        },
                        new
                        {
                            Id = new Guid("d85856df-c757-4f6e-9f10-c2095130110d"),
                            CreatedAt = new DateTime(2024, 11, 16, 12, 23, 43, 862, DateTimeKind.Utc).AddTicks(8680),
                            Name = "DIY Jewelry",
                            Type = "Blog"
                        },
                        new
                        {
                            Id = new Guid("fb428df7-6fa5-481f-b569-320bb2fa9c43"),
                            CreatedAt = new DateTime(2024, 11, 16, 12, 23, 43, 862, DateTimeKind.Utc).AddTicks(8685),
                            Name = "Trends",
                            Type = "Blog"
                        });
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Files.AboutContentImageFile", b =>
                {
                    b.HasBaseType("Shoppe.Domain.Entities.Files.ContentImageFile");

                    b.Property<Guid>("AboutId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("AboutId");

                    b.HasDiscriminator().HasValue("AboutContentImageFile");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Files.BlogContentImageFile", b =>
                {
                    b.HasBaseType("Shoppe.Domain.Entities.Files.ContentImageFile");

                    b.Property<Guid?>("BlogId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("BlogId");

                    b.HasDiscriminator().HasValue("BlogContentImageFile");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Files.ProductImageFile", b =>
                {
                    b.HasBaseType("Shoppe.Domain.Entities.Files.ImageFile");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("ProductId", "IsMain")
                        .IsUnique()
                        .HasFilter("[ProductId] IS NOT NULL AND [IsMain] = 1");

                    b.HasDiscriminator().HasValue("ProductImageFile");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Files.UserProfileImageFile", b =>
                {
                    b.HasBaseType("Shoppe.Domain.Entities.Files.ImageFile");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("UserId", "IsMain")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL AND [IsMain] = 1");

                    b.HasDiscriminator().HasValue("UserProfileImageFile");
                });

            modelBuilder.Entity("BlogBlogCategory", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.Blog", null)
                        .WithMany()
                        .HasForeignKey("BlogsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shoppe.Domain.Entities.Categories.BlogCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlogBlogTag", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.Blog", null)
                        .WithMany()
                        .HasForeignKey("BlogsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shoppe.Domain.Entities.Tags.BlogTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shoppe.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductProductCategory", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.Categories.ProductCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shoppe.Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Basket", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.Coupon", "Coupon")
                        .WithMany("Baskets")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Shoppe.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("Baskets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.BasketItem", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.Basket", "Basket")
                        .WithMany("Items")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shoppe.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Blog", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.Identity.ApplicationUser", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shoppe.Domain.Entities.Files.BlogContentImageFile", "BlogCoverImageFile")
                        .WithMany("Blogs")
                        .HasForeignKey("BlogCoverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("BlogCoverImageFile");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.DiscountCategory", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.Categories.ProductCategory", "Category")
                        .WithMany("DiscountMappings")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shoppe.Domain.Entities.Discount", "Discount")
                        .WithMany("CategoryMappings")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.DiscountProduct", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.Discount", "Discount")
                        .WithMany("ProductMappings")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shoppe.Domain.Entities.Product", "Product")
                        .WithMany("DiscountMappings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Order", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.BillingAddress", "BillingAddress")
                        .WithMany("Orders")
                        .HasForeignKey("BillingAddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Shoppe.Domain.Entities.Coupon", "Coupon")
                        .WithMany("Orders")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Shoppe.Domain.Entities.Basket", "Basket")
                        .WithOne("Order")
                        .HasForeignKey("Shoppe.Domain.Entities.Order", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shoppe.Domain.Entities.ShippingAddress", "ShippingAddress")
                        .WithMany("Orders")
                        .HasForeignKey("ShippingAddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("BillingAddress");

                    b.Navigation("Coupon");

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Payment", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("Shoppe.Domain.Entities.Payment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.ProductDetails", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.Product", "Product")
                        .WithOne("ProductDetails")
                        .HasForeignKey("Shoppe.Domain.Entities.ProductDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.ProductDimension", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.ProductDetails", "ProductDetails")
                        .WithOne("Dimension")
                        .HasForeignKey("Shoppe.Domain.Entities.ProductDimension", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Reactions.Reaction", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("Reactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Replies.Reply", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.Replies.Reply", "ParentReply")
                        .WithMany("Replies")
                        .HasForeignKey("ParentReplyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Shoppe.Domain.Entities.Identity.ApplicationUser", "Replier")
                        .WithMany("Replies")
                        .HasForeignKey("ReplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ParentReply");

                    b.Navigation("Replier");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Reviews.Review", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.Identity.ApplicationUser", "Reviewer")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Slide", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.Sliders.Slider", "Slider")
                        .WithMany("Slides")
                        .HasForeignKey("SliderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slider");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.SocialMediaLink", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.About", null)
                        .WithMany("SocialMediaLinks")
                        .HasForeignKey("AboutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Files.SlideImageFile", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.Slide", "Slide")
                        .WithOne("SlideImageFile")
                        .HasForeignKey("Shoppe.Domain.Entities.Files.SlideImageFile", "SlideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slide");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Reactions.BlogReaction", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.Blog", "Blog")
                        .WithMany("Reactions")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Reactions.ReplyReaction", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.Replies.Reply", "Reply")
                        .WithMany("Reactions")
                        .HasForeignKey("ReplyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Reply");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Replies.BlogReply", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.Blog", "Blog")
                        .WithMany("Replies")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Reviews.ProductReview", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Files.AboutContentImageFile", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.About", "About")
                        .WithMany("ContentImages")
                        .HasForeignKey("AboutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("About");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Files.BlogContentImageFile", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.Blog", null)
                        .WithMany("ContentImages")
                        .HasForeignKey("BlogId");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Files.ProductImageFile", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.Product", "Product")
                        .WithMany("ProductImageFiles")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Files.UserProfileImageFile", b =>
                {
                    b.HasOne("Shoppe.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("ProfilePictureFiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.About", b =>
                {
                    b.Navigation("ContentImages");

                    b.Navigation("SocialMediaLinks");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Basket", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Blog", b =>
                {
                    b.Navigation("ContentImages");

                    b.Navigation("Reactions");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Coupon", b =>
                {
                    b.Navigation("Baskets");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Discount", b =>
                {
                    b.Navigation("CategoryMappings");

                    b.Navigation("ProductMappings");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Baskets");

                    b.Navigation("Blogs");

                    b.Navigation("ProfilePictureFiles");

                    b.Navigation("Reactions");

                    b.Navigation("Replies");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Order", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Product", b =>
                {
                    b.Navigation("DiscountMappings");

                    b.Navigation("ProductDetails")
                        .IsRequired();

                    b.Navigation("ProductImageFiles");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.ProductDetails", b =>
                {
                    b.Navigation("Dimension")
                        .IsRequired();
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Replies.Reply", b =>
                {
                    b.Navigation("Reactions");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Slide", b =>
                {
                    b.Navigation("SlideImageFile")
                        .IsRequired();
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Sliders.Slider", b =>
                {
                    b.Navigation("Slides");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.BillingAddress", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.ShippingAddress", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Categories.ProductCategory", b =>
                {
                    b.Navigation("DiscountMappings");
                });

            modelBuilder.Entity("Shoppe.Domain.Entities.Files.BlogContentImageFile", b =>
                {
                    b.Navigation("Blogs");
                });
#pragma warning restore 612, 618
        }
    }
}
